openapi: "3.0.2"
info:
  title: Roadmap Open API
  description: Roadmap Application API Documentation
  version: "1.0"
  contact:
    name: Viorel Contu
    url: "https://github.com/viorelcontu/roadmap/"
servers:
  - url: http://localhost:8080
    description: localhost server
security:
  - ApiKeyAuth: []
paths:
  /map/coins:
    get:
      tags:
        - Currency Map
      summary: Crypto-currency mappings
      description: Fetches a list of crypto-currencies supported.
      operationId: getCoinMapping
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Coin"
              examples:
                first:
                  $ref: '#/components/examples/CoinMapExample'
        '401':
          $ref: '#/components/responses/AuthenticationFailed'

  /map/currencies:
    get:
      tags:
        - Currency Map
      summary: Currencies mappings
      description: Fetches a list of fiat currencies supported for conversion.
      operationId: getCurrencyMapping
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Currency'
              examples:
                first:
                  $ref: '#/components/examples/CurrencyMapExample'
        '401':
          $ref: '#/components/responses/AuthenticationFailed'

  '/quotes/{symbol}':
    get:
      tags:
        - Market Quotes
      summary: Market quotes by symbol
      description: |
        Obtain crypto-currency quotes by symbol path param. **This is an external request endpoint!**

        It is necessary to configure application with CoinMarketCap security token. See **README.MD** for configuration.
      operationId: getQuotesBySymbol
      parameters:
        - name: symbol
          in: path
          description: symbol
          required: true
          schema:
            type: string
            minLength: 3
            default: BTC
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Coin'
              examples:
                first:
                  $ref: '#/components/examples/BTCQuoteExample'
        '401':
          $ref: '#/components/responses/AuthenticationFailed'
        '403':
          $ref: '#/components/responses/AuthorizationFailed'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users:
   get:
     tags:
       - User Config
     summary: List all users
     operationId: findAllUsingGET
     responses:
       '200':
         description: OK
         content:
           application/json:
             schema:
               type: array
               items:
                 $ref: '#/components/schemas/User'
             examples:
               first:
                 $ref: '#/components/examples/UserListing'
       '401':
         $ref: '#/components/responses/AuthenticationFailed'
       '403':
         $ref: '#/components/responses/AuthorizationFailed'
       '500':
         $ref: '#/components/responses/InternalServerError'

   post:
     tags:
       - User Config
     summary: Create new user
     operationId: createUsingPOST
     requestBody:
       content:
         application/json:
           schema:
             $ref: '#/components/schemas/User'
     responses:
       '201':
         description: Created
         content:
           application/json:
             schema:
               $ref: '#/components/schemas/User'
       '400':
         $ref: '#/components/responses/BadRequest'
       '401':
         $ref: '#/components/responses/AuthenticationFailed'
       '403':
         $ref: '#/components/responses/AuthorizationFailed'
       '500':
         $ref: '#/components/responses/InternalServerError'


  '/users/{username}':
   get:
     tags:
       - User Config
     summary: Get user by id
     operationId: getUserDetails
     parameters:
       - name: username
         in: path
         description: user login
         required: true
         schema:
           $ref: '#/components/schemas/Username'
     responses:
       '200':
         description: OK
         content:
           application/json:
             schema:
               $ref: '#/components/schemas/User'
       '401':
         $ref: '#/components/responses/AuthenticationFailed'
       '403':
         $ref: '#/components/responses/AuthorizationFailed'
       '404':
         $ref: '#/components/responses/NotFound'
       '500':
         $ref: '#/components/responses/InternalServerError'

   put:
     tags:
       - User Config
     summary: Update user by id
     operationId: updateUsingPUT
     parameters:
       - name: username
         in: path
         description: user login
         required: true
         schema:
           $ref: '#/components/schemas/Username'
     requestBody:
       content:
         application/json:
           schema:
             $ref: '#/components/schemas/User'
     responses:
       '202':
         description: Accepted
         content:
           application/json:
             schema:
               $ref: '#/components/schemas/User'
       '400':
         $ref: '#/components/responses/BadRequest'
       '401':
         $ref: '#/components/responses/AuthenticationFailed'
       '403':
         $ref: '#/components/responses/AuthorizationFailed'
       '404':
         $ref: '#/components/responses/NotFound'
       '500':
         $ref: '#/components/responses/InternalServerError'

   delete:
     tags:
       - User Config
     summary: Delete user
     operationId: deleteUsingDELETE
     parameters:
       - name: username
         in: path
         description: user login
         required: true
         schema:
           $ref: '#/components/schemas/Username'
     responses:
       '204':
         description: No content
       '401':
         $ref: '#/components/responses/AuthenticationFailed'
       '403':
         $ref: '#/components/responses/AuthorizationFailed'
       '404':
         $ref: '#/components/responses/NotFound'
       '500':
         $ref: '#/components/responses/InternalServerError'

#      format: uuid
#      pattern: '([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}){1}'

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-KEY
  responses:
    BadRequest:
      description: 400 Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiStatus'
          example:
            status: 400 BAD_REQUEST
            message: 'Crypto-currency does not exist with id: XDS'
            developerMessage: 'BadRequestException: Crypto-currency does not exist with id: XDS'
    AuthenticationFailed:
      description: 401 Authentication Failed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiStatus'
          example:
            status: 401 Unauthorized
            message: 'Authentication failed: wrong, missing or inactive user token'
            developerMessage: 'AuthenticationException: Authentication failed: wrong, missing or inactive user token'
    AuthorizationFailed:
      description: 403 Forbidden Access
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiStatus'
          example:
            status: 403 Forbidden
            message: 'Access to resource forbidden'
            developerMessage: 'ForbiddenException: Access to resource forbidden'
    NotFound:
      description: 404 Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiStatus'
          example:
            status: 404 NOT_FOUND
            message: 'Resource with id: 5 not found'
            developerMessage: 'ResourceNotFoundException: Resource with id: 5 not found'
    InternalServerError:
      description: 500 Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiStatus'
          example:
            status: 500 INTERNAL_SERVER_ERROR
            message: 'Unknown internal error'
            developerMessage: 'Unknown Internal server error'
  schemas:
    Currency:
      title: Currency
      type: object
      additionalProperties:
        type: string
      example:
        BTC: Bitcoin

    Coin:
      title: Crypto-currency details
      type: object
      properties:
        title:
          type: string
        symbol:
          type: string
        codeName:
          type: string
        worldRank:
          type: integer
        quote:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/CoinPriceQuote'
      additionalProperties: false
      example:
        title: Bitcoin
        symbol: BTC
        codeName: bitcoin
        worldRank: 1
        quote:
          -
            code: USD
            id: 101
            price: 12030.1390711
            volume24h: 32511211106.084
            percentChange24h: -6.84533
            percentChange7d: 2.3863
            marketCap: 214267146836.1703

    CoinPriceQuote:
      type: object
      title: Market price quote
      properties:
        currency:
          type: string
        price:
          type: number
        volume24h:
          type: number
        percentChange24h:
          type: number
        percentChange7d:
          type: number
        marketCap:
          type: number
        lastUpdated:
          type: string
          format: 'date-time'
      additionalProperties: false

    User:
      title: User
      type: object
      properties:
        username:
          type: string
          minLength: 4
          maxLength: 32
          pattern: ^(?=.{4,32}$)(?![_])(?!.*[_]{2})[a-z0-9_]+(?<![_])$
        nickname:
          type: string
        email:
          type: string
          format: email
        role:
          type: string
          enum:
            - ADMIN
            - MANAGER
            - AUDIT
            - CLIENT
        credits:
          type: number
          minimum: 0
          default: 0
        active:
          type: boolean
          default: true
      required:
        - username
        - role
      example:
        username: jdoe
        nickname: John Doe
        email: john.doe@gmail.com
        role: CLIENT
        credits: 0
        active: true
      additionalProperties: false

    Username:
      type: string
      example: vcontu

    ApiStatus:
      title: Api Error Status
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        developerMessage:
          type: string
      additionalProperties: false


  examples:
    CoinMapExample:
      summary: "crypto-coin mapping"
      value: |
        [
          {
            "title": "Bitcoin",
            "symbol": "BTC",
            "codeName": "bitcoin",
            "worldRank": 1
          },
          {
            "title": "Ethereum",
            "symbol": "ETH",
            "codeName": "ethereum",
            "worldRank": 2
          }
        ]
    CurrencyMapExample:
      summary: "fiat currency mapping"
      value: |
        {
          "USD" : "United States Dollar"
          "RUB" : "Russian Ruble"
        }
    BTCQuoteExample:
      summary: "BTC with USD quoting"
      value: |
        {
          "title": "Bitcoin",
          "symbol": "BTC",
          "codeName": "bitcoin"
          "worldRank": 1,
          "quote": [
            {
              "currency": "USD",
              "price": 12030.1390711,
              "volume24h": 32511211106.084,
              "percentChange24h": -6.84533,
              "percentChange7d": 2.3863,
              "marketCap": 214267146836.1703,
              "lastUpdated": "2019-07-11T02:17:31Z"
            }
          ]
        }
    UserListing:
      summary: "list of users"
      value: |
        [
          {
            "username": "aab",
            "nickname": "Luke Skywalker",
            "email": "luke@starwars.org",
            "role": "AUDIT",
            "credits": 0,
            "active": true
          },
          {
            "username": "bbc",
            "nickname": "Average Joe",
            "email": "mail@users.net",
            "role": "CLIENT",
            "credits": 0,
            "active": true
          }
        ]